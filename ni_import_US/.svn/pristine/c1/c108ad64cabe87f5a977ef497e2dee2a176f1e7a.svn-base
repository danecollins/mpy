
import shutil
import sys
import utilities
import readmap
import math


### Fixed NI fields
Upl = 'O'
Co = '71'
Sub = '171'
PL = '00'
Proj = '000000'

def getAcctNumber(map,x):
    x = x.replace('-','')
    x = x.replace('"','')
    x = x.replace('?','')
    dept = x[0:3]
    acct = x[3:7]
    key = dept + acct
    if (not map.has_key(key)):
        ni_acct = '0000'
        ni_dept = '0000'
    else:
        (ni_dept,ni_acct) = map[key]
        
    
    return([dept,acct,ni_dept,ni_acct])
    
def readInputFile():
    map = readmap.readAccountMap()
    print "Map file read.  ", len(map), "entries found"
    
    file=open('input_61-9.txt')
    of = open('output.csv','w')
    ## Initialize Counters
    linecount=0
    skipNextLines=0
    S8=0
    S9=0
    assets=0
    liabilities=0
    expenses=0
    total=0
    xx=0
    
    #for i in range(12):
    #    line = file.readline() ## skip dummy lines
    #linecount += 12
    
    for line in file.readlines():
        linecount += 1
        if (skipNextLines>0):
            ## need a kludge to skip lines in the file so if this is set somewhere we'll skip the next n lines
            skipNextLines -= 1
        else:
            ### line contains desc, acct string, dummy, balance
            items = utilities.parseExcelTxtFileLine(line)

            if (items[0] <> ''):

                desc = items[0]
                acctString = items[1]
                ### hacks here to handle inconsistency of format of 'Accum other comprehensive income' line
                if (desc[0:11]=='Accum other'):
                    dept = '000'
                    acct = 'na'
                    ni_cc = '0000'
                    ni_acct = '39091'
                    skipNextLines=0 # no longer need to skip lines
                elif (desc[0:17]=='Retained Earnings'):
                    dept = '000'
                    acct = '3900'
                    ni_cc = '0000'
                    ni_acct = '35001'
                elif (desc[0:5]=='Total'):
                    break
                else:
                    (dept,acct,ni_cc,ni_acct) = getAcctNumber(map,acctString)

                ### Error checking to make sure there are the right number of items
                if (len(items) <> 4 and len(items)<>5):
                    print '**** Wrong number of items on the following line ****'
                    print 'There are',len(items),'instead of 4 or 5 items'
                    print line
                ### The report formats are different before and after march so the
                ### balance is in different columns
                if (len(items) == 4):
                    balance = items[3]
                else:
                    balance = items[4]

                balance = utilities.striplf(balance)
                balance = utilities.excelToNumber(balance)
                
                if (ni_acct[0] <> '0' and ni_acct <> '99999' and ni_acct <> '99998'):
                    #print Upl,Co,ni_cc,ni_acct,Sub,PL,Proj,balance,0,desc


                    ### Oracle can't handle '0' in the data so print the missing D/C as empty
                    if (balance[0] == '-'):
                        print >> of, 'O,%s,%s,%s,%s,%s,%s,,%s,%s' % (Co,ni_cc,ni_acct,Sub,PL,Proj,balance[1:],desc)
                    else:
                        print >> of, 'O,%s,%s,%s,%s,%s,%s,%s,,%s' % (Co,ni_cc,ni_acct,Sub,PL,Proj,balance,desc)
                    
                    ## now update counters
                    balance = float(balance)
                    total += balance
                    if (ni_acct[0] == '1'):
                        assets += balance
                    elif (ni_acct[0] == '2'):
                        liabilities += balance
                    else:
                        expenses += balance
                else:
                    if (ni_acct == '99999'):
                        S9 += float(balance)
                    elif (ni_acct == '99998'):
                        S8 += float(balance)
                    else:
                        print 'Unmapped account #', dept, acct,',', balance
            else:
                break
          
    if (S8 < 0):
        print >> of, 'O,%s,%s,%s,%s,%s,%s,%s,0,%s' % (Co,'9095','90999','171','0','0',abs(S8),'Other expenses')
    else:
        print >> of, 'O,%s,%s,%s,%s,%s,%s,0,%s,%s' % (Co,'9095','90999','171','0','0',abs(S8),'Other expenses')
    total = total - S8
    if (total < 0):
        print >> of, 'O,%s,%s,%s,%s,%s,%s,%s,0,%s' % (Co,'0000','10001','171','0','0',abs(total),'Petty Cash')
    else:
        print >> of, 'O,%s,%s,%s,%s,%s,%s,0,%s,%s' % (Co,'0000','10001','171','0','0',abs(total),'Petty Cash')
    file.close()
    of.close()
    print '\nStatistics on processed file'
    print '   Number of lines: ', linecount
    print '   Sum of all output =', total
    print '   Sum of all 99998 =', S8
    print '   Sum of all 99999 =', S9
    print ''


def testReadInputFile():
    readInputFile()
        

if __name__ == "__main__":
          
    testReadInputFile()